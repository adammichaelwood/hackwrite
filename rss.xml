<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hack.write()</title><link>http://hackwrite.com/</link><description>Writing about writing about development.</description><atom:link href="http://hackwrite.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 08 Feb 2017 17:55:09 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Verbiage</title><link>http://hackwrite.com/posts/verbiage/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;I hate the word &lt;em&gt;verbiage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to deal with the fact that it is the &lt;em&gt;wrong word&lt;/em&gt;. Most of the time, when people say &lt;em&gt;verbiage&lt;/em&gt;, they really mean &lt;em&gt;verbage&lt;/em&gt; --- that is, the wording. &lt;em&gt;Verbiage&lt;/em&gt;, properly, means excessive wordiness, not the specifics of word choice.&lt;/p&gt;
&lt;p&gt;But this isn't what I hate about it. I would hate it just as much if it meant precisely what every one uses it to mean. My problem is with the idea itself. I hate what people are saying when they say &lt;em&gt;verbiage&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every time I have ever heard the word &lt;em&gt;verbiage&lt;/em&gt;, the person has been talking about &lt;em&gt;the precise way that something is worded&lt;/em&gt;. The context is always about improving something.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Can you make this more clear by fixing up the verbiage?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;After you get the first draft of the design done, ask Adam to help you clean up the verbiage.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Maybe we can change the verbiage on this form to make it more user friendly.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Without fail, a request to &lt;em&gt;work on the verbiage&lt;/em&gt; is symptomatic of a deeply flawed design and engineering process. We got to this point because people were &lt;a href="http://hackwrite.com/posts/designing-vs-decorating/"&gt;decorating, not designing&lt;/a&gt;, and now we are going to try to get out of it by changing the words the user sees.&lt;/p&gt;
&lt;p&gt;This causes more problems, of course.&lt;/p&gt;
&lt;p&gt;The reason the words aren't clear and precise in the UI is that the mental model developed by the engineering team is either confused or just plain wrong. In order to make the application easy to use, our Verbiage Specialist has to overlay a new mental model --- often, the one that should have been used in the first place. This new mental model, and the collection of verbages that go with it, will be imprecise and incomplete because the Verbiage Engineering Team can't tell the developers to restructure the database and rename all the application's variables. The result is that the UI becomes temporarily easier to use, but at the cost of taking on additional Verbiage Debt. Somewhere deep in an internal wiki or Confluence page is a OVM (Object-Verbiage Mapper) glossary telling you that &lt;code&gt;dev:event_property =&amp;gt; user:"Device Status"&lt;/code&gt;. But nobody reads internal wiki pages, so the problem just gets worse.&lt;/p&gt;
&lt;p&gt;You cannot fix an application by redecorating the UI. Fixing the &lt;em&gt;verbiage&lt;/em&gt; is just redecorating + technical debt. If you find yourself &lt;em&gt;fixing up the verbiage&lt;/em&gt;, the problems are much deeper.&lt;/p&gt;
&lt;p&gt;So how do you avoid Verbiage Debt?&lt;/p&gt;
&lt;p&gt;Stop treating writers as Verbiage Technicians and think of them as Verbiage Architects. (I'm sure there's a &lt;a href="http://www.uxbooth.com/articles/what-is-ux-writing/"&gt;good word for this&lt;/a&gt; already.) Your Verbiage Team, along with your Pictures of Things Engineers, need to be involved &lt;strong&gt;from the beginning&lt;/strong&gt; with the design of your application, and they need to be fully-fledged members of the engineering team --- not hired hands, consultants, helpers, or otherwise after-the-facters.&lt;/p&gt;
&lt;p&gt;Building software has more to do with creating mental models than it does with writing code. Humans create mental models in language and pictures.&lt;/p&gt;
&lt;p&gt;Your language and pictures people are as important as your coders.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/verbiage/</guid><pubDate>Wed, 08 Feb 2017 16:26:57 GMT</pubDate></item><item><title>Designing vs. Decorating</title><link>http://hackwrite.com/posts/designing-vs-decorating/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;My wife spent some time in an Interior Design master's degree program. One of the things that frequently frustrated her was the conflation, by people outside the industry, of interior design and interior decorating.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Oh, so like, you're learning how to pick out furniture and stuff."&lt;/li&gt;
&lt;li&gt;"Can you help me pick paint colors in my bedroom?"&lt;/li&gt;
&lt;li&gt;"That's cool, like that show on HGTV."&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Decorating is primarily about aesthetics --- how things look. Design is about function --- how things work. There is certainly overlap between the professions, but their focus and concern is very different.&lt;/p&gt;
&lt;p&gt;At least, though, nearly everyone in the industry --- and certainly everyone at her school --- understood the difference. Since my wife was there the school has actually &lt;a href="http://the-bac.edu/academics/school-of-interior-architecture"&gt;changed the name of the program to &lt;em&gt;Interior Architecture&lt;/em&gt;&lt;/a&gt;, to make the focus more clear.&lt;/p&gt;
&lt;p&gt;I'm not sure the software industry as a whole understands the difference between decorating and design. Part of the problem is that we don't use the word "decorator," to describe people with graphics skills and no sense of the underlying software. Everyone is a "designer." The best we have done is to try to make distinctions between "UX Design" and "Graphic Design."&lt;/p&gt;
&lt;p&gt;In fact, I think the push in the last decade or so to use the word "UX" is an attempt to make the distinction. Unfortunately, I don't think it has helped. Like Tech Writers calling themselves "Documentation Specialists," the change in label has been driven as much by a desire for a cooler resume as by any real change in practices. The distinction we need to make is not between "graphics" and "UX," and certainly not between "UX" and "UI" (as if those are, you know, &lt;em&gt;actually&lt;/em&gt; different things, &lt;em&gt;really&lt;/em&gt;). The distinction we need to make is between design and decoration.&lt;/p&gt;
&lt;p&gt;Have you ever sat in a redesign review that solved exactly none of the problems of the original design? The new thing looks better, but it functions the same. &lt;strong&gt;Decorating&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Have you ever been involved in a process where some non-engineer Product Manager drew pictures of screens and buttons, and then someone with Photoshop skills and no coding experience turned that into a mockup? &lt;strong&gt;Decorating.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Have you ever been asked, after the graphics person has completed an entire set of screen mockups, to "help with some of the verbiage" in order to make things more clear? &lt;strong&gt;Decorating.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Any process that separates out the work of contributors --- first the engineers do something and then hand it off to the graphics person and then the tech writer writes about it later --- will tend toward decorating. Design requires people to actually talk to each other, preferably in the same room. Design requires that a person drawing and labelling a form input understand the conceptual model the form is interacting with.&lt;/p&gt;
&lt;p&gt;I suggest we stop futzing with labels for types of people and buzzwords that feel helpful but aren't. This problem cannot be solved by finding an even cooler replacement word for "UX," and then blogging about how "UX is dead, we're doing XZ now." Just keep "design" and "decoration" in your head as an evaluative tool. Look at how things are being done and ask yourself --- it this designing or is it decorating? Then, if there's too much decorating, don't spend a lot of energy convincing people about the difference. Just begin to change the process.&lt;/p&gt;
&lt;p&gt;And don't let someone with Photoshop skills redesign an app they don't understand and have never used.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/designing-vs-decorating/</guid><pubDate>Mon, 06 Feb 2017 13:41:06 GMT</pubDate></item><item><title>Docs as Code</title><link>http://hackwrite.com/posts/docs-as-code/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;h2&gt;Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docs are written in plain text formats such as Markdown or reStructured Text.&lt;/li&gt;
&lt;li&gt;Docs are stored as flat files, not database entries.&lt;/li&gt;
&lt;li&gt;Docs are authored in a code editor of the writer's choice, not a monolithic authoring application.&lt;/li&gt;
&lt;li&gt;Docs are kept under version control.&lt;/li&gt;
&lt;li&gt;Doc versions are organized in parallel to product versions.&lt;/li&gt;
&lt;li&gt;Docs are built and deployed from source in an automated process that mirrors product deployment.&lt;/li&gt;
&lt;li&gt;Docs are automatically tested for internal consistency and compliance to style guides.&lt;/li&gt;
&lt;li&gt;Whenever reasonable, writers use the same tools and processes as developers.&lt;/li&gt;
&lt;li&gt;Writers are integrated into the development team.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Writers have more control over their authoring environment.&lt;/li&gt;
&lt;li&gt;Less friction in the authoring process.&lt;/li&gt;
&lt;li&gt;Elimination of inconsistencies between docs and product.&lt;/li&gt;
&lt;li&gt;Less need for human proofreading.&lt;/li&gt;
&lt;li&gt;Coordinated releases of docs with product.&lt;/li&gt;
&lt;li&gt;Developers are more likely to contribute to docs.&lt;/li&gt;
&lt;li&gt;Writers and developers have more awareness of and respect for each others' work.&lt;/li&gt;
&lt;li&gt;Authoring and deployment tools are mostly free; hosting requires less overhead.&lt;/li&gt;
&lt;/ul&gt;</description><guid>http://hackwrite.com/posts/docs-as-code/</guid><pubDate>Wed, 01 Feb 2017 13:33:02 GMT</pubDate></item><item><title>DocOps Isn't Just the Fun Part</title><link>http://hackwrite.com/posts/docops-not-just-fun-part/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;Somewhere in the last year I decided I was into &lt;em&gt;DocOps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What that really meant for me is that I am into &lt;em&gt;Docs-as-code&lt;/em&gt;, which is a related trend, but not quite the same. I care about  things like single-source documents (DRY), version control, plain text editing, style linting, and automated deployment. I write little Python or Bash scripts to pipe tools together and customize the output of static site generators. I'm learning a lot, having a lot of fun, and finally weaving together a number of different skill sets and interests I've picked up over the years (writing, coding, project management).&lt;/p&gt;
&lt;p&gt;When I was the only writer at a startup, this was all really effective. I could fool myself into thinking I was &lt;em&gt;doing DocOps&lt;/em&gt;. And maybe I was, but only in that particular context.&lt;/p&gt;
&lt;p&gt;But now I work at a big, hulking enterprise company. And all of the sudden it is clear that DocOps isn't just the fun technology bits, just like how DevOps isn't just about knowing how to deploy Docker on Kubernetes. It's about dealing with people and dealing with organizations.&lt;/p&gt;
&lt;p&gt;I just want to stand up my docs somewhere. "Give me SSH access to a directory with a public URL." At the startup I just made a decision and had live docs published my second or third day there. At the enterprise? Not so simple. My tooling has to go through security checks. Engineers have to sign off on deployment processes. Customer service has a vested interest in how documents are delivered. Can we integrate to Salesforce knowledge base? How do I &lt;code&gt;pip install&lt;/code&gt; from behind a firewall?&lt;/p&gt;
&lt;p&gt;If I'm &lt;em&gt;into DocOps&lt;/em&gt;, this is what I'm into. Not just hacking on writing tools (as much fun as that is), but also being effective in an organization. I was very effective in a startup, where hacking on things was how the organization operated. Now I have to level up and learn how to be effective at scale.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/docops-not-just-fun-part/</guid><pubDate>Thu, 26 Jan 2017 14:56:30 GMT</pubDate></item><item><title>The Real Reason I Love Static Site Generators</title><link>http://hackwrite.com/posts/real-reason-i-love-static-site-generators/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;There's a lot to like about &lt;a href="https://www.staticgen.com/"&gt;static site generators&lt;/a&gt; like &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and &lt;a href="http://www.sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosting is much simpler, and can usually be done for free.&lt;/li&gt;
&lt;li&gt;Static sites are inherently more secure than dynamic ones.&lt;/li&gt;
&lt;li&gt;Very fast page load times.&lt;/li&gt;
&lt;li&gt;Authoring in a code editor that I have control over.&lt;/li&gt;
&lt;li&gt;Markdown and reStructured Text are both faster to type than HTML or rich content in a WYSIWYG editor.&lt;/li&gt;
&lt;li&gt;Version control.&lt;/li&gt;
&lt;li&gt;The ability to manage the build and deploy process like code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are probably more benefits I'm not thinking of at the moment. When I first started using Jekyll, my main motivation was wanting to simplify hosting and exert control over authoring. I discovered the other benefits along the way, and they have really changed my professional life.&lt;/p&gt;
&lt;p&gt;But I've realized there's one thing that has come to matter the most to me:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static sites revive and make real the notion of a document on the web.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In database-backed CMSes, the pretty URL is a noble lie. Content is smeared around in a database and accessed through &lt;code&gt;?id=1234&lt;/code&gt; parameters or internal query mechanisms. This is fine, and really the only way to handle massive amounts of content.&lt;/p&gt;
&lt;p&gt;But the web was built to serve documents, not database results. In an age where content-as-data is on such hyperdrive that people think a &lt;a href="http://sennajs.com/examples/blog/"&gt;single-page app blog system&lt;/a&gt; is a reasonable idea, it is calming to use a technology that works the way the web was always supposed to work.&lt;/p&gt;
&lt;p&gt;And this has as much to do with the mental model as with the technology. (Maybe more.) The individual documents that make up a static site are handled &lt;em&gt;as documents&lt;/em&gt; before being processed to HTML. If I want to change the content on some blog post, I edit a file on my local computer. I don't have to log in and use an application. It is transparent, and there's a direct relationship between a single file in my source and a single URI on my site. Now it feels like the URI actually identifies a &lt;em&gt;resource&lt;/em&gt;, and is not just a cleverly-disguised search pattern.&lt;/p&gt;
&lt;p&gt;I understand why we moved past the web of documents. But if you're producing documents, maybe it's the right model.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/real-reason-i-love-static-site-generators/</guid><pubDate>Wed, 25 Jan 2017 14:07:37 GMT</pubDate></item><item><title>File Names</title><link>http://hackwrite.com/posts/file-names/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;br&gt;
-- Phil Karlton&lt;/p&gt;
&lt;p&gt;I cannot help you with cache invalidation.&lt;br&gt;
-- Adam Michael Wood&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently saw a question about file names in the &lt;a href="https://www.facebook.com/groups/episcopalcommunicators/"&gt;Episcopal Communicators Facebook Group&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Question about file names." src="http://hackwrite.com/img/filename-question.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a question about filenames for websites.&lt;/p&gt;
&lt;p&gt;When we first developed our website, our consultant told me that when we put a file on there, it's important to give the file a date and a unique and descriptive name.&lt;/p&gt;
&lt;p&gt;While that works for some files, it doesn't for others. It caused me to end up with a lot of old files on my website.&lt;/p&gt;
&lt;p&gt;What I changed was that I stopped changing file names. So instead of mileage_rates_2016.pdf, I just call it mileage_rates.pdf. That way every link is correct, everywhere on the site.&lt;/p&gt;
&lt;p&gt;However, when we link to outside websites, like the wider church's site, we end up with obsolete links. Case in point: the Manual of Business Methods:&lt;/p&gt;
&lt;p&gt;We had full_manual_updated_09-30-2013.pdf.&lt;/p&gt;
&lt;p&gt;And now the link is full_manual_updated_012815_0.pdf&lt;/p&gt;
&lt;p&gt;Is there any need to give dates to files like this? It's important for the organization to archive old versions, but is there any need to have unique names so that websites like ours end up with older versions?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I summed a few file name best practices, but... I have &lt;em&gt;a lot&lt;/em&gt; to say about this topic. File naming is one of those weird little things I have irrationally strong feelings about, and the ubiquity of bad file naming practices is a constant source of rage in my life.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/file-names/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/file-names/</guid><pubDate>Fri, 20 Jan 2017 14:31:12 GMT</pubDate></item><item><title>What (and how much) to learn?</title><link>http://hackwrite.com/posts/what-and-how-much-to-learn/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently wrote that you don't need to attain a high-level of coding skill for learning to code to be useful. A technical writer can see substantial ROI from just learning &lt;a href="http://hackwrite.com/posts/enough-to-be-dangerous/"&gt;enough to be dangerous&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which raises (not begs!) the question: How much &lt;em&gt;is&lt;/em&gt; enough? What topics should tech writers know? And how well should we know them?&lt;/p&gt;
&lt;p&gt;To start answering that question, I'd like to expand what we mean by "learn to code" or "knowing how to code" to "developer skills" in general. Too much focus on &lt;em&gt;coding&lt;/em&gt; overlooks the other highly useful things that developers know and do that tech writers can benefit from.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/what-and-how-much-to-learn/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/what-and-how-much-to-learn/</guid><pubDate>Thu, 19 Jan 2017 14:30:00 GMT</pubDate></item><item><title>The Problem with Github Pages</title><link>http://hackwrite.com/posts/github-pages-problem/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;I love Github Pages. I run this blog, my &lt;a href="http://adammichaelwood.com"&gt;personal blog&lt;/a&gt;, and my &lt;a href="http://progressivesolemnity.org"&gt;music and liturgy blog&lt;/a&gt; on it. I used it to host &lt;a href="http://docs.botcentral.ai"&gt;documentation for my most recent tech writing gig&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a single writer with moderate or better technical skills looking for a simple hosting solution, it's amazing. But, I've recently realized there's a problem with it that makes it ill-suited for multiple collaborators working on complicated documentation. (Or even, as I discovered, a single writer on more than one machine.)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/github-pages-problem/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/github-pages-problem/</guid><pubDate>Tue, 10 Jan 2017 13:50:37 GMT</pubDate></item><item><title>Shipping</title><link>http://hackwrite.com/posts/shipping/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;My New Year's Resolution --- which I have so far held to --- is to write &lt;em&gt;and publish&lt;/em&gt; every day.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/shipping/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/shipping/</guid><pubDate>Mon, 09 Jan 2017 14:42:24 GMT</pubDate></item><item><title>Data Structures and Philosophy</title><link>http://hackwrite.com/posts/data-structures-and-philosophy/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;Sometimes bad programming is just bad programming: people write sloppy code, people don't know how things are supposed to work, people forget that binary math is weird sometimes.&lt;/p&gt;
&lt;p&gt;But often, bad programming is a result of bad philosophy - a fundamental misunderstanding of how meaning is made, or thought works, or how the world is structured. Sometimes the fault is a little less radical, tied to ignorance of some domain-specific facts, but often it's just plain bad philosophy.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/data-structures-and-philosophy/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/data-structures-and-philosophy/</guid><pubDate>Fri, 06 Jan 2017 15:26:34 GMT</pubDate></item></channel></rss>